doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Game development with JS and Phaser

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 Game development with JS and Phaser
        h3.mono <a href="https://www.twitter.com/ladybenko">@ladybenko</a><br>belen@mozilla.com
        

      section
        h2.bullet Why make games in JS?
        h3.bullet Because we can :)

      section
        h2 Phaser
        ul
          li.block <img src="images/phaser_logo.png" width="300">
          li Highly popular game framework
          li Excellent documentation and lots of code examples
          li High-level features: scenes, tile maps, physics, etc.
          li <a href="http://www.phaser.io">phaser.io</a>

      section#demo
        h2 A game in a weekend
        a(href="http://lab.belenalbeza.com/games/ldjam-32", target="_blank")
          img.screenshot(src="images/metal_screenshot.png")

      section
        h2 Slides &amp; examples
        h3 <a href="https://github.com/belen-albeza/betabeers-jan-2016">belen-albeza.github.io/betabeers-jan-2016</a>

      section
        h1 Press start button

      section
        h2 What do we need to make a game?
        img(src="images/game_components.svg").figure

      section
        h2 The game loop
        img(src="images/game_loop.svg").figure

      section
        h2 Init Phaser
        ul
          li Phaser can create a WebGL or 2D <code>canvas</code>
          li We need to pass callbacks for the game loop

      section
        pre
          code.language-javascript.
            var loop = {
              preload: function () {},
              create: function () {},
              update: function () {},
              render: function () {}
            };

            window.onload = function ()  {
              new Phaser.Game(640, 480, Phaser.WEBGL, 'wrapper', loop);
            };

      section
        h1 Images and sprites

      section
        h2 Draw images
        ul
          li Load the asset and assign a <em>key</em> to it
          li Create an image object and add it to the game

      section
        pre
          code.language-javascript.
            function preload () {
              this.game.load.image('background',
                '../assets/images/trees.png');
            }

            function create () {
              this.game.add.image(0, 0, 'background');
            }

      section
        h2 Sprites
        img(src="images/sonic.png")

      section
        h2 Sprites
        ul
          li Image-based <em>game entities</em>
          li Usually animated
          li Drawing properties: coordinates, transparency, rotation, etc.
          li Created or destroyed "on the fly"
          li Can interact with each other

      section
        p Use <code>Phaser.Sprite</code>
        pre
          code.language-javascript.
            var ship = new Phaser.Sprite(this.game, 10, 20, 'hero');
            this.game.add.existing(ship);
        p or use <code>game</code>'s factory
        pre
          code.language-javascript.
            var ship = this.game.add.sprite(10, 20, 'hero');
            ship.anchor.setTo(0.5, 0.5);
            ship.angle = 45;
            ship.alpha = 0.5;

      section
        h2 Animations
        img(src="images/spritesheet.png").figure
        ul
          li The original<sup>TM</sup> CSS sprites!
          li Sprites pick the correct frame depending on time

      section
        pre
          code.language-javascript.
            function preload() {
              this.game.load.spritesheet('hero',
                'character.png', 122, 256);
            };

            function create() {
              var hero = this.game.add.sprite(320, 240, 'hero');
              hero.animations.add('walk');
              hero.animations.play('walk', 5, true);
            }

      section
        h2 Move sprites (old-school)
        ul
          li We need to update the position in each frame
          li Newton's equations FTW
          li We need the <strong>delta time</strong>

      section
        pre
          code.language-javascript.
            var SHIP_SPEED = 100; // pixels / second

            function update() {
              // time in seconds
              var delta = this.game.time.elapsed / 1000.0;

              // position = speed * time
              ship.x += SHIP_SPEED * delta;
            }

      section
        h2 The game tree
        img(src="images/game_tree.svg").figure

      section
        h2 The game tree
        ul
          li Tree structure to store game entities
          li Use <em>groups</em> to hold related entities together
          li Entities can contain children
          li Automatically calls <code>update</code> and <code>render</code>

      section
        h2 Create &amp; destroy sprites
        p.bullet Add and remove them from the tree
        h3.bullet <strong>PROBLEM</strong>: it's expensive!

      section
        h2 Recycle sprites
        img(src="images/recycle.svg").figure
        ul
          li Don't destroy sprites… mark them as "zombies"
          li Re-use "zombie" sprites instead of <code>new</code>
          li Easy to implement with <code>Phaser.Group</code>

      section
        h1 Input, audio &amp; text

      section
        h2 Input
        ul
          li HTML5 support for keyboard, mouse, touch and <em>gamepad</em> events.
          li We might need to capture keys to avoid bubbling

      section
        pre
          code.language-javascript.
            function create() {
              // capture spacebar key
              spacebar = game.input.keyboard.addKey(
                Phaser.Keyboard.SPACEBAR);
              game.input.keyboard.addKeyCapture(
                [Phaser.Keyboard.SPACEBAR]);

              // register event callback
              spacebar.onDown.add(shoot);
            }

      section
        pre
          code.language-javascript.
            // check key flag
            function update() {
              if (spacebar.isDown) {
                shoot();
              }
            }

      section
        h2 Audio
        ul
          li We can load and play sound effects and song tracks
          li Formats? Same as <code>&lt;audio&gt;</code>
          li Similar to handling images
          li Can play track slices, control panning, etc.

      section
        pre
          code.language-javascript.
            // within preload
            game.load.audio('shoot', 'laser.wav');

            // within create
            sfxShoot = game.add.audio('shoot');

            // anywhere
            sfxShoot.play();

      section
        h2 Text
        ul
          li They are a game entity
          li Same API as <code>Pixi</code>
          li Use CSS fonts or bitmap fonts

      section
        pre
          code.language-javascript.
            title = game.add.text(0, 0, 'Score', {
              font: '20px monospace',
              fill: '#f00'
            });

            title.setText('Score: ' + score);

      section
        h1 Physics and collisions

      section
        h2 Collisions with b-boxes
        img(src="images/bboxes.svg").figure
        ul
          li Very fast, not accurate
          li Phaser has built-in functions to check for rect and circle overlaps

      section
        h2 Physics engines
        ul
          li Mapping between game entities and a physical world
          li Mass, speed, acceleration, bouncing, etc. implemented by smart people. And free!
          li Phaser's built-in engines: <code>Arcade</code> and <code>P2</code>

      section
        h2 Physics engines
        img(src="images/physics.svg").figure
        ul
          li Easy, intuitive API…
          li …but hard to fine-tune!

      section
        h1 The rest

      section
        h2.bullet The golden rule about game dev
        h3.bullet If you can fake it, then fake it.

      section
        h2 You should also look into
        ul
          li Game states
          li Tiled maps
          li Finite state machines
          li Scripting

      section
        h2 Examples for this talk
        p <a href="http://belen-albeza.github.io/betabeers-jan-2016/examples/">Snippets and a game!</a>

      section
        h2 Links
        ul.all
          li <a href="http://developer.mozilla.org/Games">Games at MDN</a>
          li <a href="http://www.html5gamedevs.com/forum/14-phaser/">Phaser's forum</a>
          li <a href="http://www.ludumdare.com">Ludum Dare</a> (48h game jam)
          li <a href="http://gamedevelopment.tutsplus.com/articles/1gam-how-to-succeed-at-making-one-game-a-month--gamedev-3695">One game a month</a> (article)
          li <a href="http://www.gamasutra.com/">Gamasutra</a>

      section
        h1 Thanks!
        h3 Questions?
        

    script(src='build/build.js')
